
git clone git@www.hxay2005.net:/home/git/hxy/hxy.git
Windows下打开Git Bash，创建SSH Key：
ssh-keygen -t rsa -C "291166364@qq.com"
id_rsa id_rsa.pub 生成的两个key文件

在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件
-------------------------------------------------------------------
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758410364457b9e3d821f4244beb0fd69c61a185ae0000
--------------------------------------
git_Apis
http://blog.csdn.net/mirkerson/article/details/22914865
常用操作：
http://b.soont.com/page/3

https://github.com/disnio/mjsa.git

git@github.com:disnio/mjsa.git

Git 支持许多数据传输协议。之前的例子使用的是 git:// 协议，
不过你也可以用 http(s):// 
或者 user@server:/path.git 表示的 SSH 传输协议。

git submodule foreach --recursive git submodule init
git submodule foreach --recursive git submodule update
这样貌似可以一次搞定了.
创建后生成：
touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:disnio/mjsa.git
git push -u origin master

跳过使用暂存区域：
git commit -a -m 'added new benchmarks'

$ git rm --cached readme.txt
$ git rm log/\*.log
$ git rm \*~

移除：
$ git mv file_from file_to
运行 git mv 就相当于运行了下面三条命令：
$ mv README.txt README
$ git rm README.txt
$ git add README


$ git help 命令名
--------------------------------------------------------
将自上次 push 以来的，本地历次 commit，【推送到服务器】
结合我们的实际，应该这样写：
$ git push origin master:your-id

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream branch-name origin/branch-name。

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
----------------------------------------------------------
【新建分支】：
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
切换到另外的分支，进行开发：
$ git checkout branch-name

合并指定分支到当前分支：
$ git merge branch-name

$ git log -p -2

准备【合并d】ev分支，请注意--no-ff参数，表示禁用Fast forward：
$ git merge --no-ff -m "merge with no-ff" dev
因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

合并后，我们用git log看看分支历史：
$ git log --graph --pretty=oneline --abbrev-commit
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

删除分支：
$ git branch -d 欲删除的分支名
【注意！】不要把 ‘-d’ 写成了 ‘-D’，危险！
    -d：要求：被删除分支的所有修改，已经合并到当前分支；
    -D：直接删除，未合并的代码，将被丢弃！
--------------------------------------------------------
把误删的文件【恢复】到最新版本：
$ git checkout -- test.txt

checkout
恢复某个已修改的文件（撤销未提交的修改）：
$ git checkout file-name

还原最近一次提交的修改：
$ git revert HEAD
倒数第2次：
$ git revert HEAD^

还原指定版本的修改，commit 之后的修改：
$ git revert commit-id
  git reflog 查看命令历史
  git reset --hard 87af069
在 git add 之后的恢复：
  git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区

---------------------------------------------------------------
当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，
但是，等等，当前正在dev上进行的工作还没有提交。
并不是你不想提交，而是工作只进行到一半，还没法提交。但是，必须在两个小时内修复该bug，怎么办？
Git还提供了一个【stash】功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：

若你正在开发功能 A，又需立即去开发功能 B。A 的代码正改到一半，未认真整理，你不想立即提交。此时……请呼叫 stash ～。
它会使你所有未提交的修改瞬间不见了：
$ git stash
git stash list

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了：
$ git stash pop

你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
$ git stash apply stash@{0}

---------------------------------------------------------------
添加【远程仓库】：
git remote -v

在本地的learngit仓库下运行命令：
$ git remote add origin git@github.com:michaelliao/learngit.git
$ git push -u origin master

查看远程仓库信息：
$ git remote show origin
如果是在 master 分支，就可以用 git pull 命令抓取数据合并到本地。

远程仓库的删除和重命名：
$ git remote rename pb paul
$ git remote rm paul

$ git last
----------------------------------------------------

在非bare的git仓库中，如果你要同步的本地跟踪分支是当前分支，就会出现拒绝fetch的情况。也就是说不可以在非bare的git仓库中通过fetch快进你的当前分支与远程同步。个人和我同事的理解是：如果本地数据被修改过了，这种同步的fetch会更改本地的文件（相当于fetch后再checkout到某个commit点），可能影响当前未提交的的工作。
----------------------------------------------------
oydsoft@wsc:~/develop/mygit/.git$ cat config
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[remote "tgit"]
    url = /home/oydsoft/develop/testgit.git
    fetch = +refs/heads/*:refs/remotes/tgit/*
    */
---------------------------------------------------   
Git的【标签】虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。

$ git tag v1.0
git tag查看所有标签

git log --pretty=oneline --abbrev-commit
找到历史提交的commit id，然后打上就可以了

$ git tag v0.9 6224937

可以用git show tagname 查看标签信息

还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：

$ git tag -a v0.1 -m "version 0.1 released" 3628164

还可以通过-s用私钥签名一个标签：

$ git tag -s v0.2 -m "signed version 0.2 released" fec145a

签名采用PGP签名，因此，必须首先安装gpg（GnuPG）

如果标签打错了，也可以删除：

$ git tag -d v0.1

如果要推送某个标签到远程，使用命令git push origin tagname：

$ git push origin v1.0

或者，一次性推送全部尚未推送到远程的本地标签：

$ git push origin --tags

如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
从远程删除。删除命令也是push，但是格式如下：
$ git push origin :refs/tags/v0.9
----------------------------------------------------
别名：
$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
取消别名 git config --global --unset alias.st
----------------------------------------------------
https://github.com/github/gitignore 已准备好的忽略文件
忽略规则：
http://cwind.iteye.com/blog/1666646

http://blog.csdn.net/vic___/article/details/9446729
git 还提供了另一种 exclude 的方式来完成同样的忽略

不同的是 .gitignore 这个文件本身会push到库中去。保存的是公共的需要排除的文件。
而exclude 是自己本地忽略的设置，不会影响到其他人，也不会提交到库中去。


git config --global core.excludesfile ~/.gitignore_global
本地创建项目文件目录添加文件，加入.gitignore文件，屏蔽不需要添加到git的目录和文件。
.gitignore：
/jslib/
/build/
.DS_Store
gen_docs.disable
test.disable
regression/temp*.html
performance/temp*.html
.idea/workspace.xml
*~
*.swp
angular.js.tmproj
/node_modules/
/components/
/bower_components/
angular.xcodeproj
.idea
.agignore
libpeerconnection.log
npm-debug.log
/tmp/
/scripts/bower/bower-*
*.iml
.idea/
.ipr
.iws
*~
~*
*.diff
*.patch
*.bak
.DS_Store
Thumbs.db
.svn/
*.swp
.nojekyll
.project
.settings/
------------------------------------------
使用gitgui 在项目目录建立同名的版本库，缓存改动，签名（Sign Off）。
提交到本地主分支。

WebStrom->file->setting->Version Control 添加。
对应git和github已配置好。

push 出现没有远程定义。
使用gitgui->远端->上传，master分支，目标版本库 Arbitrary Location:下加入远程git路径，传输选项强制覆盖已有分支。
remote: Repository not found.

git远端未建立对应的仓库repository。
登录git创建对应的仓库，再push上传。OK。
------------------------------------------
40字符的对象名是对对象内容作sha1计算得来。
两个不同内容的对象不可能有相同的对象名。

四种对象类型：
blob 存储文件数据, 
tree 像目录管理一些tree或blob, 
commit 指向一个tree 标记项目在某一特定时间的状态。
tag 标记某一个commit 的方法。

与其他系统的不同：
Subversion， cvs等死增量文件系统（Delta Storage systems），他们存储每次提交（commit）之间的差异。

Git 是把每次提交的文件的全部内容（snapshot）都记录下来。
