注意主导航中的空格，会影响到重写page 时候的 tpl 引用。page--node.tpl.php  page--zgc.tpl.php
根据内容类型覆写views jiaju/views-view-fields--default.tpl.php
homeban_bhban/views-view-unformatted--homeban--bhban.tpl 首页幻灯
多个page导致多个zgc模板，所以需要解决统一模板的问题，向page传参数。

http://lugir.com/book

jquery-update 需启用，否则 jquery1.4 和 jqueryui1.8
节点是 Drupal 中的一个通用术语，表示网站中的各种内容（content）。通俗来讲，节点就是网站中的各种文章页面
区块（Blocks）是一些用于放置到区域（region）中的内容块，因此被称为区块。

主题：
http://www.ibm.com/developerworks/cn/opensource/os-new-drupal-theme/
http://blog.csdn.net/wjc19911118/article/details/7752479
主题 tpl 可用变量：
https://www.drupal.org/node/190815

在 Drupal 7 中创建自定义 Web 服务项目
http://www.ibm.com/developerworks/cn/opensource/os-drupal-web-service-project/index.html

http://lugir.com/story/303.html
-------------------
Panels： 模块允许站点管理员（有时可以是用户）维护更改页面、边栏及内容中某个部分的布局，
并且就像控制让哪些内容在页面布局中被显示一样容易。

Drupal 用户熟悉 Drupal 默认的布局机制，即定义区域(Regions)和区块(Blocks)，然后将区块分配到主题中不同的区域即可。
Panels 模块将这个机制又向前进了一步。通过 Panels 接口，你可以通过创建一个布局(layout)
作为开始，然后可以在这个布局中添加任意数量地列(columns)、页头(headers)和页脚(footer)，并对它们的宽度进行控制。
Panel pages 是最主要的 Panels 模块，可以通过它创建页面的布局。

Panel nodes 是创建页面中仅内容区域的布局的实用工具。有时你可能会希望能够在节点布局中添加一些区域，比如为新闻或者照片添加一个评分区域，但又不想添加到所有节点中。Panel Nodes 让你可以对单个节点的布局进行控制，并向其中添加博客、图片。

Mini panels 是一个区块布局的控制机制。使用 mini panels 可以创建一个小的面板(panel)，并通过向其中添加内容及其它元素，使它们就像一个区块中的内容，然后只需要将这个 mini panels 放置到 panels-page 或 panels-node 中即可。就像将区块(block)放置到区域(region)中一样简单。
-------------------
Search：
search（搜索）、filter（过滤）、faceted（分面搜索）、Solr（Apache Solr）。因为 filter 在 Drupal 里是“输入格式”的专有名词，进行这个搜索得到的结果往往并非是我们所需要的。

将节点的字段作为过滤条件显示（暴露）出来，即可实现通过多条件/多形式进行过滤的功能，然后因为 Views 使用过滤条件时使用 GET 方式将参数追加到 URL 后，因此只要边栏的另外两个视图同样能够接收 URL 中的参数，就可以实现一处过滤，多处过滤的条件导航了。

计算字段图片数量：
echo count($content['field_pics']['#items']); 
--------------------
钩子：
Drupal使用了“控制反转”的设计模式，也就是让框架本身在适当时机去调用模块提供的功能。这种调用机制，在Drupal中，被称为钩子(Hook)。
钩子可以被看作是Drupal的内部事件，它们也被叫做“回调函数”。

由于它们是按照函数命名规范来构建的，而非真正的注册了一个监听器listener，所以它们不算真正意义上的“回调”。
想修改或覆盖Drupal的核心功能，最常见的方式就是在模块中实现相应的钩子。


Profiles目录存放着某个网站的不同的Drupal安装描述文件。
Scripts目录中包含了一些脚本用来检查语法，清理代码，从命令行运行Drupal或是一些使用CRON的特殊的例子。
这个目录在Drupal处理用户HTTP请求周期中并不会被用到;它们都是shell和Perl的脚本。

URL与PHP方法间的映射是通过回调函数注册来完成的，在映射的同时，还考虑了访问权限的问题。各个模块都通过_menu这个钩子来注册各自的回调函数

---------------------------
模块开发：
http://drupalchina.cn/content/di-san-jie-gei-mo-kuai-jia-xie-ju-ti-de-she-ding
每个表单的属性（实际上是数组的键）用一个井号（‘#’）标出。
node_get_types('names') 返回节点的内容类型。
variable_get() 和 variable_set()来实现任意变量的存取。
当使用system_settings_form()的时候，表单元素的名字（这里是annotate_node_types）必须和variable_get()中键的名字保持一致。
function annotate_admin_settings(){
    //Get an array of node types with internal names as keys and
    //“friendly names”as values.
    //E.G.,array(‘page’ => ‘Page’,’story’ => ‘Story’)
    $options = node_get_types(‘names’);

    $form[‘annotate_node_types’] = array(
        ‘#type’ => ‘checkboxes’,
        ‘#title’ => t(‘Users may annotate these content types’),
        '#options' => $options,
        '#default_value' => variable_get('annotate_node_types', array('page')),
        '#description' => t('A text field will be available on these content types to make user-specific notes.'),
    );
 
    return system_settings_form($form);
}
详细解释钩子：
http://drupalchina.cn/content/di-jie-li-jie-shi-jian-he-hong-fa-qi
另外一个Drupal的钩子——nodeapi钩子，它会在Drupal对节点做各种行为的时候被调用。
当我们的模块被调用的时候Drupal本身在进行什么活动。这些信息体现在变量$op（operation）的取值上，
它们可以是insert(节点正在被创建)，delete（节点正在被删除），或者其他一个或多个值。

<?php
/**
 * Implementation of hook_schema().
 */
function annotate_schema() {
    $schema['annotations'] = array(
        'description' => t('Stores node annotations that users write.'),
        'fields' => array(
            'nid' => array(
                'type' => 'int',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'default' => 0,
                'description' => t('The {node}.nid to which the annotation applies.'),
            ),
            'uid' => array(
                'type' => 'int',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'default' => 0,
                'description' => t('The {user}.uid of the user who created the annotation.'),
            ),
            'note' => array(
                'description' => t('The text of the annotation.'),
                'type' => 'text',
                'not null' => TRUE,
                'size' => 'big',
            ),
            'created' => array(
                'description' => t('A Unix timestamp indicating when the annotation was created.'),
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
            ),
        ),
        'primary key' => array(
            'nid', 'uid',
        ),
    );
    return $schema;
}
/**
* Handle submission of the annotation form and saving
* of the data to the database.
*/

Tip：如果你因为在install文件中范了语法错误或者其他的失误而导致了失败，按照类似上面的方法卸载模块和数据表可以使一切还原。
而到了万不得已的时候，删除数据库中system表中关于此模块的那行也可以达到同样的目的。

function annotate_entry_form_submit($form, $form_state) {
    global $user;
    $note = $form_state['values']['note'];
    $nid = $form_state['values']['nid'];
    db_query('DELETE FROM {annotations} WHERE nid = %d AND uid = %d', $nid, $user->uid);
    db_query("INSERT INTO {annotations} (nid, uid, note, created) VALUES (%d, %d, '%s', %d)", $nid, $user->uid, $note, time());
    drupal_set_message(t('Your annotation has been saved.'));
}

调用drupal_get_form ('annotate_admin_settings')函数，这个过程就是让 Drupal建立 annotate_admin_settings()函数所定义的表单的过程。

开发的第一个动作(Action)

function beep_action_info() {
    $info['beep_beep_action'] = array(
        'type' => 'system',
        'description' => t('Beep annoyingly'),
        'configurable' => FALSE,
        'hooks' => array(
            'nodeapi' => array('view', 'insert', 'update', 'delete'),
            'comment' => array('view', 'insert', 'update', 'delete'),
            'user' => array('view', 'insert', 'update', 'delete', 'login'),
            'taxonomy' => array('insert', 'update', 'delete'),
        ),
    );
    return $info;
}

菜单系统：作为一个拥有三个主要责任的话，可能会更恰当一些 1，回调映射，2，访问控制，3，菜单定制。

-------------------------------Think in Drupal--------------------------------------
模块配置：info
http://www.thinkindrupal.com/node/5338
其次需要注意的是，module文件中不要使用php结束标签 “?>”;这个结束标签对于PHP来说是可选的，
但在Drupal中，有可能导致文件的尾部空格问题

Drupal在呈现表单时，为我们提供了两个钩子，用来修改表单，一个是hook_form_alter，另一个是hook_form_FORM_ID_alter。

什么是表单ID？它通常就是定义表单的函数的名字。

在Drupal中，区块的ID是由模块名和delta值共同组成的。

在第一次启用block_morelink模块时，drupal会检查block_morelink.install文件，看里面是否实现了hook_schema钩子，它将读取hook_schema中所定义的数据库表结构模式，并将它们转化为了当前数据库的标准SQL语句。


在Drupal7中，对于各种创建的内容，基本上都采用“呈现数组”这种方式。
所有的表单、表单元素都属于“呈现数组”。但不是每一个“呈现数组”都是表单。也就是说，“呈现数组”这个概念范畴更广一点。

用户登录常用解决方案：
http://www.thinkindrupal.com/node/5535


