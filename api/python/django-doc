
------------------------------------------------------------------------------
Model对象和查询：
Django: User.objects.create(..)
编辑后保存一个model
Django:user.save()

Django的查询集
Django: Model.objects.get(id=10)
Django: Model.objects.filter(..conditions)
Django: Model.objects.orderby(“created_at”) 

c:\Python27\Lib\site-packages\django-1.7.1-py2.7.egg\django\bin
C:\Program Files (x86)\JetBrains\PyCharm 4.0.1\bin
回调：
signals-信号 (例如保存前触发的事件）或者方法的重写例如 .save 

# -*- coding: UTF-8 -*-    
或者
#coding=utf-8 

运行python manage.py shell而不是python。这两个命令都会启动交互解释器，但是manage.py shell命令有一个重要的不同： 在启动解释器之前，它告诉Django使用哪个设置文件。 Django框架的大部分子系统，包括模板系统，都依赖于配置文件；如果Django不知道使用哪个配置文件，这些系统将不能工作。

修改初始Manager QuerySets

模型方法

执行原始SQL查询：
导入django.db.connection对像，它代表当前数据库连接。 
通过connection.cursor()得到一个游标对像。 
使用cursor.execute(sql, [params])来执行SQL语句，
使用cursor.fetchone()或者cursor.fetchall()来返回记录集。

from django.db import connection, models

class PersonManager(models.Manager):
    def first_names(self, last_name):
        cursor = connection.cursor()
        cursor.execute("""
            SELECT DISTINCT first_name
            FROM people_person
            WHERE last_name = %s""", [last_name])
        return [row[0] for row in cursor.fetchone()]

class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    objects = PersonManager()

Person.objects.first_names('Lennon')
['John', 'Cynthia']    
--------------------------------------------------------------------------------
模板系统：
base.html 模板里面可以引入js但，嵌入在script标签里的js不执行， 作为js模板也不可以。


{% if %} 标签不允许在同一个标签中同时使用 and 和 or 

`` for`` 标签支持一个可选的`` {% empty %}`` 分句，通过它我们可以定义当列表为空时的输出内容 

forloop.counter 总是一个表示当前循环的执行次数的整数计数器。

forloop.revcounter 是表示循环中剩余项的整型变量

forloop.first 是一个布尔值，如果该迭代是第一次执行，那么它被置为```` 
{% for object in objects %}
    {% if forloop.first %}
    <li class="first">
    {% else %}
    <li>
    {% endif %}
    {{ object }}
    </li>
{% endfor %}

forloop.last 是一个布尔值；在最后一次执行循环时被置为True。 
常见的用途是为列表的每个单词的加上逗号。
Favorite places:
{% for p in places %}{{ p }}{% if not forloop.last %}, {% endif %}{% endfor %}


forloop.parentloop 是一个指向当前循环的上一级循环的 forloop 对象的引用

{% ifequal %} 和 {% endifequal %}

模板过滤器：是在变量被显示前修改它的值的一个简单方法。
addslashes : 添加反斜杠到任何反斜杠、单引号或者双引号前面。 这在处理包含JavaScript的文本时是非常有用的。

This will not be escaped: {{ data|safe }}

{% autoescape off %}
    Hello {{ name }}
{% endautoescape %}

direct_to_template 毫无疑问是非常有用的，但Django通用视图最有用的地方是呈现数据库中的数据。

通用视图：
http://djangobook.py3k.cn/2.0/chapter11/
urls.py
from django.conf.urls.defaults import *
from django.views.generic import list_detail
from mysite.books.models import Publisher

def get_books():
    return Book.objects.all()

publisher_info = {
    'queryset': Publisher.objects.all(),
    'template_name': 'publisher_list_page.html',
    'template_object_name': 'publisher',
    'extra_context': {'book_list': get_books}
    #'extra_context': **{'book_list': Book.objects.all}
}

urlpatterns = patterns('',
    (r'^publishers/$', list_detail.object_list, publisher_info)
)

{% extends "base.html" %}

{% block content %}
    <h2>Publishers</h2>
    <ul>
        {% for publisher in object_list %}
            <li>{{ publisher.name }}</li>
        {% endfor %}
    </ul>
{% endblock %}

显示对象的子集:
apress_books = {
    'queryset': Book.objects.filter(publisher__name='Apress Publishing'),
    'template_name': 'books/apress_list.html'
}

urlpatterns = patterns('',
    (r'^publishers/$', list_detail.object_list, publisher_info),
    (r'^books/apress/$', list_detail.object_list, apress_books),
)

用函数包装来处理复杂的数据过滤:
urlpatterns = patterns('',
    (r'^publishers/$', list_detail.object_list, publisher_info),
    **(r'^books/(\w+)/$', books_by_publisher),**
)

from django.shortcuts import get_object_or_404
from django.views.generic import list_detail
from mysite.books.models import Book, Publisher

def books_by_publisher(request, name):
    # Look up the publisher (and raise a 404 if it can't be found).
    publisher = get_object_or_404(Publisher, name__iexact=name)

    # Use the object_list view for the heavy lifting.
    return list_detail.object_list(
        request,
        queryset = Book.objects.filter(publisher=publisher),
        template_name = 'books/books_by_publisher.html',
        template_object_name = 'book',
        extra_context = {'publisher': publisher}
    )

处理额外工作:
from mysite.books.views import author_detail

urlpatterns = patterns('',
    # ...
    (r'^authors/(?P<author_id>\d+)/$', author_detail),
    # ...
)

import datetime
from django.shortcuts import get_object_or_404
from django.views.generic import list_detail
from mysite.books.models import Author

def author_detail(request, author_id):
    # Delegate to the generic view and get an HttpResponse.
    response = list_detail.object_detail(
        request,
        queryset = Author.objects.all(),
        object_id = author_id,
    )

    # Record the last accessed date. We do this *after* the call
    # to object_detail(), not before it, so that this won't be called
    # unless the Author actually exists. (If the author doesn't exist,
    # object_detail() will raise Http404, and we won't reach this point.)
    now = datetime.datetime.now()
    Author.objects.filter(id=author_id).update(last_accessed=now)

    return response

def author_list_plaintext(request):
    response = list_detail.object_list(
        request,
        queryset = Author.objects.all(),
        mimetype = 'text/plain',
        template_name = 'books/author_list.txt'
    )
    response["Content-Disposition"] = "attachment; filename=authors.txt"
    return response
-------------------------------------------------------------------
date : 按指定的格式字符串参数格式化 date 或者 datetime 对象

你一次性地载入某个模板文件，渲染它，然后将此作为 HttpResponse返回。
该捷径就是位于 django.shortcuts 模块中名为 render_to_response() 的函数

Python 的内建函数 locals() 。它返回的字典对所有局部变量的名称与值进行映射。

模板标签： {% block %} 。 所有的 {% block %} 标签告诉模板引擎，子模板可以重载这些部分。 每个{% block %}标签所要做的是告诉模板引擎，该模板下的这一块内容将有可能被子模板覆盖。
{% extends %} 标签， 注意到该模板是一个子模板。 模板引擎立即装载其父模板，即本例中的 base.html 
任何处在继承树上的模板都可以访问到你传到模板中的每一个模板变量。
如果你需要访问父模板中的块的内容，使用 {{ block.super }}这个标签吧，这一个魔法变量将会表现出父模板中的内容
 {% extends %} 的参数应该是字符串，但是如果直到运行时方能确定父模板名，这个参数也可以是个变量。 这使得你能够实现一些很酷的动态功能。


URLconf里面的：

命名组：
urlpatterns = patterns('',
    (r'^articles/(?P<year>\d{4})/$', views.year_archive),
    (r'^articles/(?P<year>\d{4})/(?P<month>\d{2})/$', views.month_archive),
)
如果不带命名组，请求 /articles/2006/03/ 将会等同于这样的函数调用：
month_archive(request, '2006', '03')

而带命名组，同样的请求就会变成这样的函数调用：
month_archive(request, year='2006', month='03')

每一个模式都可以包含第三个数据： 一个关键字参数的字典。
urlpatterns = patterns('',
    (r'^foo/$', views.foobar_view, {'template_name': 'template1.html'}),
    (r'^bar/$', views.foobar_view, {'template_name': 'template2.html'}),
)

urlpatterns = patterns('',
    (r'^blog/$', views.page),
    (r'^blog/page(?P<num>\d+)/$', views.page),
)
# views.py
def page(request, num='1'):
    # Output the appropriate page of blog entries, according to num.

每个被捕获的参数将被作为纯Python字符串来发送，而不管正则表达式中的格式。

根据请求方法来处理分支是视图函数的责任：

如果你在函数定义时,只在参数前面加一个*号,所有传递给函数的参数将会保存为一个元组. 如果你在函数定义时,在参数前面加两个*号,所有传递给函数的关键字参数,将会保存为一个字典

包装视图函数：
def requires_login(view):
    def new_view(request, *args, **kwargs):
        if not request.user.is_authenticated():
            return HttpResponseRedirect('/accounts/login/')
        return view(request, *args, **kwargs)
    return new_view

from django.conf.urls.defaults import *
from mysite.views import requires_login, my_view1, my_view2, my_view3

urlpatterns = patterns('',
    (r'^view1/$', requires_login(my_view1)),
    (r'^view2/$', requires_login(my_view2)),
    (r'^view3/$', requires_login(my_view3)),
)

包含其他URLconf：
urlpatterns = patterns('',
    (r'^weblog/', include('mysite.blog.urls')),
    (r'^photos/', include('mysite.photos.urls')),
    (r'^about/$', 'mysite.views.about'),
)
指向 include() 的正则表达式并 不 包含一个 $ （字符串结尾匹配符），但是包含了一个斜杆。 每当Django遇到 include() 时，它将截断匹配的URL，并把剩余的字符串发往包含的URLconf作进一步处理。
urlpatterns = patterns('',
    (r'^(\d\d\d\d)/$', 'mysite.blog.views.year_detail'),
    (r'^(\d\d\d\d)/(\d\d)/$', 'mysite.blog.views.month_detail'),
)

urlpatterns = patterns('',
    (r'^(?P<username>\w+)/blog/', include('foo.urls.blog')),
)

# foo/urls/blog.py
被捕获的 username 变量将传递给被包含的 URLconf，进而传递给那个URLconf中的 每一个 视图函数。
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    (r'^$', 'foo.views.blog_index'),
    (r'^archive/$', 'foo.views.blog_archive'),
)
------------------------------------------------------------
Django 只在需要的时候才送出cookie。 如果你压根儿就没有设置任何会话数据，
它不会 送出会话cookie(除非 SESSION_SAVE_EVERY_REQUEST 设置为 True )。

Django session 框架完全而且只能基于cookie。 它不会后退到把会话ID编码在URL中（像某些工具(PHP,JSP)那样）。